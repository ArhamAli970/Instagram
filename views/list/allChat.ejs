<% layout("layout/boilerplate.ejs") %>

<style>
    .mar{
        margin: 0rem;
    }
</style>



<div class="chatRoom" id="<%= data._id %>">

    <div class="users">

    
        <% for(user of ans ){%>
        <a  onclick="fun('<%= user._id %>')">
            <div class="frnd" id="<%=user._id %>">
                <div class="userImg">
                    <img src=<%= user.pic %> alt="">
                </div>
                <p> <%= user.username.username  %> </p>
                <!-- <p><%= user._id  %></p> -->

            </div>
        </a>

            <% } %>

    </div>

    <div class="realTimeChats" >


    
            <div class="instamess rmv">
                <div class="uspc">
                  <img src="" class="photo" alt=""> 
                </div>
                <!-- &nbsp; &nbsp; &nbsp; &nbsp; -->
                <div class="name"></div>
            
            </div>

        

        


        <ul id="messages"></ul>


       <div class="sendChats">
           
        <form action="" class="frm">
        <div class="sendBox">
            <input class="form-control msgBox"  id="btt1" type="search" name="search"><button id="snd" class="btn"><i class="fa-regular fa-paper-plane"></i></button>
    
        </div>
    </form>

       </div>

    </div>

    
</div>
<script src="/socket.io/socket.io.js"></script>
<script>

const socket = io();
// const mongoose = require('mongoose');


let user=document.querySelector('.chatRoom');
let frm=document.querySelector('.frm');
let inp=document.querySelector('.msgBox'); 
let div=document.querySelector('.sendBox');
let msg=document.querySelector('#messages');

window.onload = function() {
    // console.log("hello",user.id);
    // Send the username to the server by emitting a 'register' event

    socket.emit('register', user.id);
};




frm.addEventListener('submit',(e)=>{
    e.preventDefault();
    // console.log(div.id);
    socket.emit('chat mess',{from:user.id,to:div.id,mess:inp.value});
    console.log(inp.value);
    inp.value='';

})


socket.on('chat mess',(mess)=>{
  
    if(div.id==mess.from || div.id==mess.to){
    const item = document.createElement('li');
    item.classList.add('fl');
    const sp= document.createElement('span');

    sp.textContent = mess.message;
    item.append(sp);
    


    if(div.id==mess.from){
        item.style.justifyContent='flex-start'; 
        sp.classList.add('sp1')

       }else{
        item.style.justifyContent='flex-end'
        sp.classList.add('sp2')

    }


    messages.append(item);
    // messages.append();
}

    // window.scrollTo(0, document.body.scrollHeight);

   

// if (isScrolledToBottom) {
    scrollToBottom();


})

function scrollToBottom() {
    // console.log("df");
    const messagesContainer = document.getElementById("messages");
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}


    function fun(id){
        let d=document.querySelector('.instamess');
        d.classList.remove('rmv');
        console.log(id);
        d.style.display='flex';
        div.setAttribute('id',id);
        let pht=document.querySelector('.photo');
        let nm=document.querySelector('.name');
        msg.innerHTML='';
        axios.get(`/getChats/${id}/${user.id}`)
        .then((res)=>{
            pht.setAttribute('src',res.data.url);
            nm.innerText=res.data.name;
            let chats=res.data.chats;
             for( let chat of chats){
                // console.log(chat.content);
    const item = document.createElement('li');
    item.classList.add('fl');
    const sp= document.createElement('span');

    sp.textContent = chat.content;
    item.append(sp);


    if(id==chat.sender._id){
        item.style.justifyContent='flex-start'; 
        sp.classList.add('sp1')

       }else{
        item.style.justifyContent='flex-end'
        sp.classList.add('sp2')

    }
    messages.append(item);
    // messages.append();



             }
             scrollToBottom();

        })
        .catch((err)=>{
            console.log(err.message);
        })
        
    }
    
</script>